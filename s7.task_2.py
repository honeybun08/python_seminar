# 2) Дано вещественное число, показать сумму его цифр.

num = 3.12
stroka = str(num)

res = list(filter(lambda x: x!='.', stroka))
print(res)
res = sum(list(map(int,res)))
print(res)


# в одну строку:
# print(sum(map(int,list(filter(lambda x: x!='.', str(float(input())))))))


# 2й вариант
# number = 3.12 # float
# num_str = str(number)
# splited = num_str.replace(".", "")
# result = sum(map(lambda x: int(x), splited)) 
# print(result)



















# Задача №49. Решение в группах
# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна
# Пример ввода и вывода данных представлены на
# следующем слайде
# Задача №49. Решение в группах
# Ввод:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))
# Вывод:
# 2.5 10

def find_farthest_orbit(orbits):
    arr_orbits = [i for i in orbits if i[0] != i[1]]
    areas = [(i[0]*i[1]) for i in arr_orbits]
    maximum = areas.index(max(areas)) 
    return arr_orbits[maximum]
# print(find_farthest_orbit([(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]))

